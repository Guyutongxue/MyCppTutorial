[
  {
    "keyword": "override",
    "usage": [
      {
        "info": "用于面向对象：指定某子类函数必将覆盖基类中的虚函数。",
        "sdsc": [
          "<i>返回类型</i> <i>函数名</i>(<b>形参列表</b>) override;"
        ],
        "example": "struct A {\n    virtual void f() = 0;\n};\nstruct B : A {\n    void f() override {}\n};"
      }
    ]
  },
  {
    "keyword": "final",
    "usage": [
      {
        "info": "用于面向对象：指定该类不可继承。",
        "sdsc": [
          "<x-or>class<hr>struct</x-or> <b>类名</b> final {\n    <b>成员列表</b>\n};"
        ],
        "example": "struct A final {};\n// can't write: struct B : A ;"
      }
    ]
  },
  {
    "keyword": "import",
    "usage": [
      {
        "info": "用于模块：导入一个模块。也兼容将一个头文件作为模块导入。",
        "sdsc": [
          "import <i>模块名</i>;",
          "import &lt;<i>头文件</i>&gt;;"
        ],
        "example": "// main.cpp\nimport my.app.hello;\nimport <iostream>\nint main() {\n    std::cout << sayHello();\n}"
      }
    ]
  },
  {
    "keyword": "module",
    "usage": [
      {
        "info": "用于模块：声明一个模块实现单元（Module Implementation Unit）或者模块接口单元(Module Interface Unit。",
        "sdsc": [
          "<opt-block>export</opt-block> module <i>模块名</i>;"
        ],
        "example": "// hello.cpp\nexport module my.app.hello\nexport auto sayHello();\n// hello_impl.cpp\nmodule my.app.hello\nauto sayHello() {\n    return \"hello!\";\n}"
      }
    ]
  },
  {
    "keyword": "transaction_safe",
    "usage": [
      {
        "info": "（实验性功能）用于事务：声明某函数为事务安全的。",
        "sdsc": [
          "<i>返回类型</i> <i>函数名</i>(<b>形参列表</b>) transaction_safe;"
        ],
        "example": "int f() transaction_safe {}"
      }
    ]
  },
  {
    "keyword": "transaction_safe",
    "usage": [
      {
        "info": "（实验性功能）用于事务：声明某虚函数为事务安全的，即它的最终覆盖函数也是事务安全的。",
        "sdsc": [
          "virtual <i>返回类型</i> <i>函数名</i>(<b>形参列表</b>) transaction_safe_dynamic;"
        ],
        "example": "struct S {\n    virtual int f() transaction_safe_dynamic {}\n};"
      }
    ]
  }
]